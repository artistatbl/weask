generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  firstName        String?
  lastName         String?
  gender           String?
  profileImageUrl  String?
  clerkId          String         @unique
  subscription     Subscription?
  chatMessages     ChatMessage[]
  searchHistories  SearchHistory[]
 

  jobs             Job[]
  dailyChatCount   Int            @default(0)
  lastChatReset    DateTime       @default(now())

  @@index([clerkId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  sessionId String
  role      String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionId])
}

model SearchHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  sessionId String
  domain    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId, domain])
  @@index([userId, domain])
}


model SubscriptionPlan {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  planId         String         @unique
  name           String         @unique
  description    String
  price          Decimal
  yearlyPrice    Decimal?
  montlyPrice    Decimal?
  currency       String
  interval       String
  dailyChatLimit Int
  features       String[]
  subscriptions  Subscription[]
  planType       PlanType       // Add this line
}

model Subscription {
  id                     String           @id @default(uuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  subscriptionId         String           @unique
  stripeUserId           String
  status                 SubscriptionStatus
  startDate              DateTime
  endDate                DateTime?
  planId                 String
  lastInvoiceId    String?
  lastInvoiceAmount Decimal?
  lastInvoiceDate   DateTime?

  planType               PlanType         // Add this line
  defaultPaymentMethodId String?
  email                  String
  clerkId                String
  user                   User             @relation(fields: [userId], references: [id])
  userId                 String           @unique
  plan                   SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([clerkId, subscriptionId])
}



model Payment {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  stripeId        String   @unique
  email           String
  amount          Decimal
  paymentTime     DateTime
  currency        String
  clerkId         String
  customerDetails Json
  paymentIntent   String?

  @@index([clerkId, stripeId])
}

model Invoice {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  invoiceId      String   @unique
  subscriptionId String?
  amountPaid     Decimal
  amountDue      Decimal?
  currency       String
  status         InvoiceStatus
  email          String
  clerkId        String?

  @@index([clerkId, invoiceId])
}

model Job {
  id        String   @id @default(uuid())
  status    JobStatus
  result    Json?
  error     String?
  type      JobType
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, url])
  @@index([status])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  OVERDUE
  UNPAID
}

enum InvoiceStatus {
  PAID
  UNPAID
  VOID
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobType {
  ESSAY
  REPORT
  OTHER
}

enum PlanType {
  BASIC
  PRO
}
